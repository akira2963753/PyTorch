"use strict";(self.webpackChunkanytype_publish_renderer=self.webpackChunkanytype_publish_renderer||[]).push([["6299"],{64657:function(e,a,n){n.d(a,{B7:()=>D,Bf:()=>O,Bi:()=>Q,F8:()=>y,F9:()=>C,Ii:()=>A,Iy:()=>L,Ki:()=>K,L:()=>o,LG:()=>B,MS:()=>N,MZ:()=>j,Mp:()=>G,OG:()=>ec,P9:()=>w,QV:()=>I,SV:()=>ed,S_:()=>R,Sg:()=>Z,TB:()=>d,V7:()=>en,W1:()=>el,X9:()=>et,gf:()=>es,p1:()=>q,qm:()=>ep,rT:()=>$,t3:()=>ee,ty:()=>z,yW:()=>V,zJ:()=>m});var r=n(2086);let t="AbstractRule",i="AbstractType",s="Condition",u="ValueLiteral",l="AbstractElement";function m(e){return ef.isInstance(e,l)}let c="BooleanLiteral";function o(e){return ef.isInstance(e,c)}let p="Conjunction";function d(e){return ef.isInstance(e,p)}let f="Disjunction";function y(e){return ef.isInstance(e,f)}let T="InferredType";function R(e){return ef.isInstance(e,T)}let h="Interface";function I(e){return ef.isInstance(e,h)}let g="Negation";function A(e){return ef.isInstance(e,g)}let k="ParameterReference";function V(e){return ef.isInstance(e,k)}let b="ParserRule";function C(e){return ef.isInstance(e,b)}function G(e){return ef.isInstance(e,"ReturnType")}let S="SimpleType";function L(e){return ef.isInstance(e,S)}let v="TerminalRule";function N(e){return ef.isInstance(e,v)}let P="Type";function w(e){return ef.isInstance(e,P)}let U="Action";function B(e){return ef.isInstance(e,U)}let E="Alternatives";function j(e){return ef.isInstance(e,E)}let x="Assignment";function D(e){return ef.isInstance(e,x)}let F="CharacterRange";function O(e){return ef.isInstance(e,F)}let W="CrossReference";function K(e){return ef.isInstance(e,W)}let M="EndOfFile";function $(e){return ef.isInstance(e,M)}let _="Group";function z(e){return ef.isInstance(e,_)}let H="Keyword";function q(e){return ef.isInstance(e,H)}let J="NegatedToken";function Q(e){return ef.isInstance(e,J)}let X="RegexToken";function Z(e){return ef.isInstance(e,X)}let Y="RuleCall";function ee(e){return ef.isInstance(e,Y)}let ea="TerminalAlternatives";function en(e){return ef.isInstance(e,ea)}let er="TerminalGroup";function et(e){return ef.isInstance(e,er)}let ei="TerminalRuleCall";function es(e){return ef.isInstance(e,ei)}let eu="UnorderedGroup";function el(e){return ef.isInstance(e,eu)}let em="UntilToken";function ec(e){return ef.isInstance(e,em)}let eo="Wildcard";function ep(e){return ef.isInstance(e,eo)}class ed extends r.$v{getAllTypes(){return["AbstractElement","AbstractRule","AbstractType","Action","Alternatives","ArrayLiteral","ArrayType","Assignment","BooleanLiteral","CharacterRange","Condition","Conjunction","CrossReference","Disjunction","EndOfFile","Grammar","GrammarImport","Group","InferredType","Interface","Keyword","NamedArgument","NegatedToken","Negation","NumberLiteral","Parameter","ParameterReference","ParserRule","ReferenceType","RegexToken","ReturnType","RuleCall","SimpleType","StringLiteral","TerminalAlternatives","TerminalGroup","TerminalRule","TerminalRuleCall","Type","TypeAttribute","TypeDefinition","UnionType","UnorderedGroup","UntilToken","ValueLiteral","Wildcard"]}computeIsSubtype(e,a){switch(e){case U:case E:case x:case F:case W:case M:case _:case H:case J:case X:case Y:case ea:case er:case ei:case eu:case em:case eo:return this.isSubtype(l,a);case"ArrayLiteral":case"NumberLiteral":case"StringLiteral":return this.isSubtype(u,a);case"ArrayType":case"ReferenceType":case S:case"UnionType":return this.isSubtype("TypeDefinition",a);case c:return this.isSubtype(s,a)||this.isSubtype(u,a);case p:case f:case g:case k:return this.isSubtype(s,a);case T:case h:case P:return this.isSubtype(i,a);case b:return this.isSubtype(t,a)||this.isSubtype(i,a);case v:return this.isSubtype(t,a);default:return!1}}getReferenceType(e){let a=`${e.container.$type}:${e.property}`;switch(a){case"Action:type":case"CrossReference:type":case"Interface:superTypes":case"ParserRule:returnType":case"SimpleType:typeRef":return i;case"Grammar:hiddenTokens":case"ParserRule:hiddenTokens":case"RuleCall:rule":return t;case"Grammar:usedGrammars":return"Grammar";case"NamedArgument:parameter":case"ParameterReference:parameter":return"Parameter";case"TerminalRuleCall:rule":return v;default:throw Error(`${a} is not a valid reference id.`)}}getTypeMetaData(e){switch(e){case"AbstractElement":return{name:"AbstractElement",properties:[{name:"cardinality"},{name:"lookahead"}]};case"ArrayLiteral":return{name:"ArrayLiteral",properties:[{name:"elements",defaultValue:[]}]};case"ArrayType":return{name:"ArrayType",properties:[{name:"elementType"}]};case"BooleanLiteral":return{name:"BooleanLiteral",properties:[{name:"true",defaultValue:!1}]};case"Conjunction":return{name:"Conjunction",properties:[{name:"left"},{name:"right"}]};case"Disjunction":return{name:"Disjunction",properties:[{name:"left"},{name:"right"}]};case"Grammar":return{name:"Grammar",properties:[{name:"definesHiddenTokens",defaultValue:!1},{name:"hiddenTokens",defaultValue:[]},{name:"imports",defaultValue:[]},{name:"interfaces",defaultValue:[]},{name:"isDeclared",defaultValue:!1},{name:"name"},{name:"rules",defaultValue:[]},{name:"types",defaultValue:[]},{name:"usedGrammars",defaultValue:[]}]};case"GrammarImport":return{name:"GrammarImport",properties:[{name:"path"}]};case"InferredType":return{name:"InferredType",properties:[{name:"name"}]};case"Interface":return{name:"Interface",properties:[{name:"attributes",defaultValue:[]},{name:"name"},{name:"superTypes",defaultValue:[]}]};case"NamedArgument":return{name:"NamedArgument",properties:[{name:"calledByName",defaultValue:!1},{name:"parameter"},{name:"value"}]};case"Negation":return{name:"Negation",properties:[{name:"value"}]};case"NumberLiteral":return{name:"NumberLiteral",properties:[{name:"value"}]};case"Parameter":return{name:"Parameter",properties:[{name:"name"}]};case"ParameterReference":return{name:"ParameterReference",properties:[{name:"parameter"}]};case"ParserRule":return{name:"ParserRule",properties:[{name:"dataType"},{name:"definesHiddenTokens",defaultValue:!1},{name:"definition"},{name:"entry",defaultValue:!1},{name:"fragment",defaultValue:!1},{name:"hiddenTokens",defaultValue:[]},{name:"inferredType"},{name:"name"},{name:"parameters",defaultValue:[]},{name:"returnType"},{name:"wildcard",defaultValue:!1}]};case"ReferenceType":return{name:"ReferenceType",properties:[{name:"referenceType"}]};case"ReturnType":return{name:"ReturnType",properties:[{name:"name"}]};case"SimpleType":return{name:"SimpleType",properties:[{name:"primitiveType"},{name:"stringType"},{name:"typeRef"}]};case"StringLiteral":return{name:"StringLiteral",properties:[{name:"value"}]};case"TerminalRule":return{name:"TerminalRule",properties:[{name:"definition"},{name:"fragment",defaultValue:!1},{name:"hidden",defaultValue:!1},{name:"name"},{name:"type"}]};case"Type":return{name:"Type",properties:[{name:"name"},{name:"type"}]};case"TypeAttribute":return{name:"TypeAttribute",properties:[{name:"defaultValue"},{name:"isOptional",defaultValue:!1},{name:"name"},{name:"type"}]};case"UnionType":return{name:"UnionType",properties:[{name:"types",defaultValue:[]}]};case"Action":return{name:"Action",properties:[{name:"cardinality"},{name:"feature"},{name:"inferredType"},{name:"lookahead"},{name:"operator"},{name:"type"}]};case"Alternatives":return{name:"Alternatives",properties:[{name:"cardinality"},{name:"elements",defaultValue:[]},{name:"lookahead"}]};case"Assignment":return{name:"Assignment",properties:[{name:"cardinality"},{name:"feature"},{name:"lookahead"},{name:"operator"},{name:"terminal"}]};case"CharacterRange":return{name:"CharacterRange",properties:[{name:"cardinality"},{name:"left"},{name:"lookahead"},{name:"right"}]};case"CrossReference":return{name:"CrossReference",properties:[{name:"cardinality"},{name:"deprecatedSyntax",defaultValue:!1},{name:"lookahead"},{name:"terminal"},{name:"type"}]};case"EndOfFile":return{name:"EndOfFile",properties:[{name:"cardinality"},{name:"lookahead"}]};case"Group":return{name:"Group",properties:[{name:"cardinality"},{name:"elements",defaultValue:[]},{name:"guardCondition"},{name:"lookahead"}]};case"Keyword":return{name:"Keyword",properties:[{name:"cardinality"},{name:"lookahead"},{name:"value"}]};case"NegatedToken":return{name:"NegatedToken",properties:[{name:"cardinality"},{name:"lookahead"},{name:"terminal"}]};case"RegexToken":return{name:"RegexToken",properties:[{name:"cardinality"},{name:"lookahead"},{name:"regex"}]};case"RuleCall":return{name:"RuleCall",properties:[{name:"arguments",defaultValue:[]},{name:"cardinality"},{name:"lookahead"},{name:"rule"}]};case"TerminalAlternatives":return{name:"TerminalAlternatives",properties:[{name:"cardinality"},{name:"elements",defaultValue:[]},{name:"lookahead"}]};case"TerminalGroup":return{name:"TerminalGroup",properties:[{name:"cardinality"},{name:"elements",defaultValue:[]},{name:"lookahead"}]};case"TerminalRuleCall":return{name:"TerminalRuleCall",properties:[{name:"cardinality"},{name:"lookahead"},{name:"rule"}]};case"UnorderedGroup":return{name:"UnorderedGroup",properties:[{name:"cardinality"},{name:"elements",defaultValue:[]},{name:"lookahead"}]};case"UntilToken":return{name:"UntilToken",properties:[{name:"cardinality"},{name:"lookahead"},{name:"terminal"}]};case"Wildcard":return{name:"Wildcard",properties:[{name:"cardinality"},{name:"lookahead"}]};default:return{name:e,properties:[]}}}}let ef=new ed},46498:function(e,a,n){n.d(a,{n:()=>u});var r=n(75314),t=n(46577),i=n(79756),s=n(64657);function u(e){let a=[];for(let n of e.Grammar.rules)(0,s.MS)(n)&&(0,t.md)(n)&&(0,i.Rn)((0,t.s1)(n))&&a.push(n.name);return{multilineCommentRules:a,nameRegexp:r.uz}}},74840:function(e,a,n){n(46498)}}]);
//# sourceMappingURL=6299.dbe11fc88532ecb8.js.map